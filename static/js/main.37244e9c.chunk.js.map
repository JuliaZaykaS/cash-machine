{"version":3,"sources":["helpers/decrement.ts","helpers/increment.ts","store/atm.ts","store/purse.ts","components/AddCash.tsx","store/card.ts","components/GetCash.tsx","helpers/getNeededCash.ts","App.tsx","index.tsx","App.module.css"],"names":["decrement","cash","value","quantity","increment","makeAutoObservable","this","Object","entries","map","el","Number","reduce","acc","incrementFunc","decrementFunc","AddCash","observer","onBtnClick","useState","addCash","setAddCash","className","s","title","Badge","bg","Form","onSubmit","e","preventDefault","purse","atm","form","Group","InputGroup","Text","Control","type","name","onChange","currentTarget","Button","variant","onClick","GetCash","getCash","setGetCash","limit","setLimit","card","total","amountRequired","limits","money","collect","amount","nominals","length","currentNominal","avaliableNotes","notesNeeded","Math","floor","numberOfNotes","min","result","slice","keys","sort","a","b","forEach","App","isAdd","setIsAdd","isGet","setIsGet","isGreeting","setIsGreeting","app","btnAdd","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.37244e9c.chunk.js","sourcesContent":["const decrement = (\r\n  cash: { [x: string]: number },\r\n  value: string,\r\n  quantity: number\r\n) => {\r\n  switch (value) {\r\n    case \"5000\":\r\n      cash[\"5000\"] -= quantity;\r\n      break;\r\n    case \"2000\":\r\n      cash[\"2000\"] -= quantity;\r\n      break;\r\n    case \"1000\":\r\n      cash[\"1000\"] -= quantity;\r\n      break;\r\n    case \"500\":\r\n      cash[\"500\"] -= quantity;\r\n      break;\r\n    case \"200\":\r\n      cash[\"200\"] -= quantity;\r\n      break;\r\n    case \"100\":\r\n      cash[\"100\"] -= quantity;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport default decrement;\r\n","const increment = (\r\n  cash: { [x: string]: number },\r\n  value: string,\r\n  quantity: number\r\n) => {\r\n  switch (value) {\r\n    case \"5000\":\r\n      cash[\"5000\"] += quantity;\r\n      break;\r\n    case \"2000\":\r\n      cash[\"2000\"] += quantity;\r\n      break;\r\n    case \"1000\":\r\n      cash[\"1000\"] += quantity;\r\n      break;\r\n    case \"500\":\r\n      cash[\"500\"] += quantity;\r\n      break;\r\n    case \"200\":\r\n      cash[\"200\"] += quantity;\r\n      break;\r\n    case \"100\":\r\n      cash[\"100\"] += quantity;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport default increment;\r\n","import { makeAutoObservable } from \"mobx\";\r\nimport decrementFunc from \"../helpers/decrement\";\r\nimport incrementFunc from \"../helpers/increment\";\r\nclass ATM {\r\n  cash = {\r\n    5000: 4,\r\n    2000: 6,\r\n    1000: 9,\r\n    500: 8,\r\n    200: 2,\r\n    100: 5,\r\n  };\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get total() {\r\n    const total = Object.entries(this.cash)\r\n      .map((el) => Number(el[0]) * el[1])\r\n      .reduce((el, acc) => {\r\n        return acc + el;\r\n      }, 0);\r\n    return total;\r\n  }\r\n  increment(value: string, quantity: number | any) {\r\n    incrementFunc(this.cash, value, (quantity = 1));\r\n  }\r\n  decrement(value: string, quantity: number | any) {\r\n    decrementFunc(this.cash, value, (quantity = 1));\r\n  }\r\n}\r\n\r\nexport default new ATM();\r\n","import { makeAutoObservable } from \"mobx\";\r\nimport decrementFunc from \"../helpers/decrement\";\r\nimport incrementFunc from \"../helpers/increment\";\r\n\r\nclass Purse {\r\n  cash = {\r\n    5000: 0,\r\n    2000: 1,\r\n    1000: 4,\r\n    500: 0,\r\n    200: 0,\r\n    100: 2,\r\n  };\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get total() {\r\n    const total = Object.entries(this.cash)\r\n      .map((el) => Number(el[0]) * el[1])\r\n      .reduce((el, acc) => {\r\n        return acc + el;\r\n      }, 0);\r\n\r\n    return total;\r\n  }\r\n  increment(value: string, quantity: number | any) {\r\n    incrementFunc(this.cash, value, (quantity = 1));\r\n  }\r\n  decrement(value: string, quantity: number | any) {\r\n    decrementFunc(this.cash, value, (quantity = 1));\r\n  }\r\n}\r\n\r\nexport default new Purse();\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, FormEvent, useState } from \"react\";\r\nimport atm from \"../store/atm\";\r\nimport purse from \"../store/purse\";\r\nimport { Button, Form, InputGroup, Badge } from \"react-bootstrap\";\r\nimport s from \"../App.module.css\";\r\n\r\ntype funcClick = () => void;\r\nconst AddCash = observer(({ onBtnClick }: { onBtnClick: funcClick }) => {\r\n  const [addCash, setAddCash] = useState(\"\");\r\n\r\n  const onInputChange = (e: ChangeEvent) => {\r\n    const { name, value } = e.currentTarget as HTMLTextAreaElement;\r\n    switch (name) {\r\n      case \"addCash\":\r\n        setAddCash(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    purse.decrement(addCash, 1);\r\n    atm.increment(addCash, 1);\r\n    setAddCash(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={s.title}>\r\n        <Badge bg=\"info\"> Банкомат принимает купюры номиналом:</Badge>\r\n        <Badge bg=\"info\">5000, 2000, 1000, 500, 200 и 100</Badge>\r\n      </h4>\r\n      <Form onSubmit={onSubmitForm} className={s.form}>\r\n        <Form.Group className=\"mb-3\">\r\n          <InputGroup.Text>Внесите деньги по одной купюре</InputGroup.Text>\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"addCash\"\r\n            value={addCash}\r\n            onChange={onInputChange}\r\n          />\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"outline-success\">\r\n          Внести\r\n        </Button>\r\n      </Form>\r\n      <Button type=\"button\" variant=\"outline-danger\" onClick={onBtnClick}>\r\n        В главное меню\r\n      </Button>\r\n    </>\r\n  );\r\n});\r\nexport default AddCash;\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass Card {\r\n  cash = 20000;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  increment(value: string) {\r\n    this.cash += Number(value);\r\n  }\r\n  decrement(value: string) {\r\n    this.cash -= Number(value);\r\n  }\r\n}\r\n\r\nexport default new Card();\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport atm from \"../store/atm\";\r\nimport purse from \"../store/purse\";\r\nimport card from \"../store/card\";\r\nimport { getNeededCash } from \"../helpers/getNeededCash\";\r\nimport { Button, Form, InputGroup, Badge } from \"react-bootstrap\";\r\nimport s from \"../App.module.css\";\r\n\r\ntype funcClick = () => void;\r\nconst GetCash = observer(({ onBtnClick }: { onBtnClick: funcClick }) => {\r\n  const [getCash, setGetCash] = useState(\"\");\r\n  const [limit, setLimit] = useState(false);\r\n\r\n  const onInputChange = (e: React.ChangeEvent) => {\r\n    setLimit(false);\r\n    const { name, value } = e.currentTarget as HTMLTextAreaElement;\r\n    switch (name) {\r\n      case \"getCash\":\r\n        setGetCash(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (Number(getCash) > card.cash || Number(getCash) > atm.total) {\r\n      setLimit(true);\r\n      return;\r\n    }\r\n    const money = getNeededCash(Number(getCash), atm.cash);\r\n    if (!money) {\r\n      setLimit(true);\r\n      return;\r\n    }\r\n\r\n    const newArr = Object.entries(money);\r\n\r\n    newArr.forEach((el) => {\r\n      purse.increment(el[0], el[1]);\r\n      atm.decrement(el[0], el[1]);\r\n    });\r\n\r\n    setGetCash(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmitForm} className={s.form}>\r\n        <Form.Group className=\"mb-3\">\r\n          <InputGroup.Text>Введите сумму кратную 100</InputGroup.Text>\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"getCash\"\r\n            value={getCash}\r\n            onChange={onInputChange}\r\n          />\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"outline-success\">\r\n          Получить наличные\r\n        </Button>\r\n      </Form>\r\n      {limit && (\r\n        <h3>\r\n          <Badge bg=\"danger\">Операция не может быть выполнена.</Badge>\r\n          <Badge bg=\"danger\">Введите другую сумму или заберите карту</Badge>\r\n        </h3>\r\n      )}\r\n      <Button type=\"button\" variant=\"outline-danger\" onClick={onBtnClick}>\r\n        В главное меню\r\n      </Button>\r\n    </>\r\n  );\r\n});\r\nexport default GetCash;\r\n","let getNeededCash = (\r\n  amountRequired: number,\r\n  limits: { [x: number]: number }\r\n) => {\r\n  let nominals = Object.keys(limits)\r\n    .map(Number)\r\n    .sort((a, b) => b - a);\r\n\r\n  function collect(amount: number, nominals: number[]) {\r\n    if (!nominals.length) return;\r\n    let currentNominal: number = nominals[0];\r\n    let avaliableNotes: number = limits[currentNominal]; //доступное количество в банкомате купюр\r\n    let notesNeeded = Math.floor(amount / currentNominal); // узнаем нужное количество купюр для выдачи\r\n    let numberOfNotes = Math.min(avaliableNotes, notesNeeded); //получаем количество, которое можем выдать, исходя из доступных и требуемых\r\n\r\n    let result: { [x: string]: number } | undefined = collect(\r\n      amount - numberOfNotes * currentNominal,\r\n      nominals.slice(1)\r\n    ); //вычисляем оставшуюся сумму к выдаче, если 0, выходим, если >0, ищем другие купюры\r\n    let finishResult: any = numberOfNotes\r\n      ? { [currentNominal]: numberOfNotes, ...result }\r\n      : result;\r\n    return finishResult; //если все выдать не удалось, то записываем полученные купюры в объект и идем дальше выдавать, если сумма вся, то выдаем итог, сколько и каких купюр выдаем\r\n  }\r\n\r\n  return collect(amountRequired, nominals);\r\n};\r\n\r\nexport { getNeededCash };\r\n","import { useState } from \"react\";\nimport AddCash from \"./components/AddCash\";\nimport GetCash from \"./components/GetCash\";\nimport s from \"./App.module.css\";\nimport { Button, Badge } from \"react-bootstrap\";\n\nfunction App() {\n  const [isAdd, setIsAdd] = useState(false);\n  const [isGet, setIsGet] = useState(false);\n  const [isGreeting, setIsGreeting] = useState(true);\n\n  const onBtnAddCashClick = () => {\n    setIsAdd(true);\n    setIsGreeting(false);\n  };\n  const onBtnGetCashClick = () => {\n    setIsGet(true);\n    setIsGreeting(false);\n  };\n  const onBtnAddBackClick = () => {\n    setIsAdd(false);\n    setIsGreeting(true);\n  };\n  const onBtnGetBackClick = () => {\n    setIsGet(false);\n    setIsGreeting(true);\n  };\n\n  return (\n    <section className={s.app}>\n      {isGreeting && (\n        <>\n          <h3 className={s.title}>\n            <Badge>Добро пожаловать в банкомат!Выберите операцию:</Badge>\n          </h3>\n\n          <Button\n            type=\"button\"\n            variant=\"outline-primary\"\n            onClick={onBtnAddCashClick}\n            className={s.btnAdd}\n          >\n            Внести наличные\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline-primary\"\n            onClick={onBtnGetCashClick}\n          >\n            Получить наличные\n          </Button>\n        </>\n      )}\n\n      {isAdd && <AddCash onBtnClick={onBtnAddBackClick} />}\n      {isGet && <GetCash onBtnClick={onBtnGetBackClick} />}\n    </section>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__lORhl\",\"btnAdd\":\"App_btnAdd__1xH1x\",\"title\":\"App_title__3A8bm\",\"form\":\"App_form__h_CM4\"};"],"sourceRoot":""}